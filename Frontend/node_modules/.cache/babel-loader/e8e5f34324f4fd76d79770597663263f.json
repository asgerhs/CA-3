{"ast":null,"code":"const URL = \"https://melif.dk/security\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction ApiFacade() {\n  //Insert utility-methods from a latter step (d) here\n  const setToken = token => {\n    localStorage.setItem('jwtToken', token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem('jwtToken');\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  function makeOptions(method, addToken, body) {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  }\n\n  const login = (user, pass) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: pass\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n    });\n  };\n\n  const fetch = () => {\n    const options = this.makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n  };\n\n  return {\n    login,\n    logout,\n    fetch\n  };\n}\n\nexport default ApiFacade();","map":{"version":3,"sources":["/Users/Joe/Desktop/Skole/3Sem/HandIn/CA-3/Frontend/src/ApiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","ApiFacade","setToken","token","localStorage","setItem","getToken","getItem","loggedIn","logout","removeItem","makeOptions","method","addToken","body","opts","headers","JSON","stringify","login","user","pass","options","username","password","fetch","then"],"mappings":"AAAA,MAAMA,GAAG,GAAG,2BAAZ;;AAEA,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,MAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,WAAOC,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,MAAM,EAAEJ,GAAG,CAACI,MAAd;AAAsBC,MAAAA,SAAS,EAAEL,GAAG,CAACM,IAAJ;AAAjC,KAAf,CAAP;AACH;;AACD,SAAON,GAAG,CAACM,IAAJ,EAAP;AACH;;AAED,SAASC,SAAT,GAAqB;AACjB;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxBC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACH,GAFD;;AAGA,QAAMG,QAAQ,GAAG,MAAM;AACnB,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACH,GAFD;;AAGA,QAAMC,QAAQ,GAAG,MAAM;AACnB,UAAMA,QAAQ,GAAGF,QAAQ,MAAM,IAA/B;AACA,WAAOE,QAAP;AACH,GAHD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACjBL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD;;AAIA,WAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,IAAvC,EAA6C;AACzC,QAAIC,IAAI,GAAG;AACPH,MAAAA,MAAM,EAAEA,MADD;AAEPI,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU;AAFL;AAFF,KAAX;;AAOA,QAAIH,QAAQ,IAAIL,QAAQ,EAAxB,EAA4B;AACxBO,MAAAA,IAAI,CAACC,OAAL,CAAa,gBAAb,IAAiCV,QAAQ,EAAzC;AACH;;AACD,QAAIQ,IAAJ,EAAU;AACNC,MAAAA,IAAI,CAACD,IAAL,GAAYG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAZ;AACH;;AACD,WAAOC,IAAP;AACH;;AAED,QAAMI,KAAK,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC1B,UAAMC,OAAO,GAAGX,WAAW,CAAC,MAAD,EAAS,IAAT,EAAe;AAAEY,MAAAA,QAAQ,EAAEH,IAAZ;AAAkBI,MAAAA,QAAQ,EAAEH;AAA5B,KAAf,CAA3B;AACA,WAAOI,KAAK,CAACjC,GAAG,GAAG,YAAP,EAAqB8B,OAArB,CAAL,CACFI,IADE,CACGjC,gBADH,EAEFiC,IAFE,CAEGhC,GAAG,IAAI;AAAEQ,MAAAA,QAAQ,CAACR,GAAG,CAACS,KAAL,CAAR;AAAqB,KAFjC,CAAP;AAGH,GALD;;AAOA,QAAMsB,KAAK,GAAG,MAAM;AAChB,UAAMH,OAAO,GAAG,KAAKX,WAAL,CAAiB,KAAjB,EAAwB,IAAxB,CAAhB,CADgB,CAC+B;;AAC/C,WAAOc,KAAK,CAACjC,GAAG,GAAG,gBAAP,EAAyB8B,OAAzB,CAAL,CAAuCI,IAAvC,CAA4CjC,gBAA5C,CAAP;AACH,GAHD;;AAKA,SAAO;AACH0B,IAAAA,KADG;AAEHV,IAAAA,MAFG;AAGHgB,IAAAA;AAHG,GAAP;AAMH;;AAED,eAAexB,SAAS,EAAxB","sourcesContent":["const URL = \"https://melif.dk/security\";\n\nfunction handleHttpErrors(res) {\n    if (!res.ok) {\n        return Promise.reject({ status: res.status, fullError: res.json() })\n    }\n    return res.json();\n}\n\nfunction ApiFacade() {\n    //Insert utility-methods from a latter step (d) here\n    const setToken = (token) => {\n        localStorage.setItem('jwtToken', token)\n    }\n    const getToken = () => {\n        return localStorage.getItem('jwtToken')\n    }\n    const loggedIn = () => {\n        const loggedIn = getToken() != null;\n        return loggedIn;\n    }\n    const logout = () => {\n        localStorage.removeItem(\"jwtToken\");\n    }\n    \n    function makeOptions(method, addToken, body) {\n        var opts = {\n            method: method,\n            headers: {\n                \"Content-type\": \"application/json\",\n                'Accept': 'application/json',\n            }\n        }\n        if (addToken && loggedIn()) {\n            opts.headers[\"x-access-token\"] = getToken();\n        }\n        if (body) {\n            opts.body = JSON.stringify(body);\n        }\n        return opts;\n    }\n\n    const login = (user, pass) => {\n        const options = makeOptions(\"POST\", true, { username: user, password: pass });\n        return fetch(URL + \"/api/login\", options)\n            .then(handleHttpErrors)\n            .then(res => { setToken(res.token) })\n    }\n\n    const fetch = () => {\n        const options = this.makeOptions(\"GET\", true); //True add's the token\n        return fetch(URL + \"/api/info/user\", options).then(handleHttpErrors);\n    }\n\n    return {\n        login,\n        logout,\n        fetch\n    }\n\n}\n\nexport default ApiFacade();"]},"metadata":{},"sourceType":"module"}